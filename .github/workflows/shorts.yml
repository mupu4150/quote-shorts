name: Build Shorts (Pattern-2: bg_switch_at + TTS)

on:
  repository_dispatch:
    types: [quote-shorts]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq python3 python3-pip open-jtalk \
            hts-voice-nitech-jp-atr503-m001 fonts-noto-cjk

      - name: Extract payload
        run: |
          # 受け取り
          jq -r '.client_payload.segments_json' "$GITHUB_EVENT_PATH" > segments.json
          jq -r '.client_payload.narration' "$GITHUB_EVENT_PATH" > narration.txt
          # 可変（省略可：未指定でも動く）
          jq -r '.client_payload.bg_urls // empty | .[]' "$GITHUB_EVENT_PATH" > bg_urls.txt || true
          jq -r '.client_payload.bg_switch_at // empty | @json' "$GITHUB_EVENT_PATH" > bg_switch_at.json || echo "[]" > bg_switch_at.json
          VOICE_RATE=$(jq -r '.client_payload.voice_rate // 1.08' "$GITHUB_EVENT_PATH")
          echo "VOICE_RATE=$VOICE_RATE" >> $GITHUB_ENV

      - name: TTS (OpenJTalk → voice.wav)
        run: |
          open_jtalk \
            -x /var/lib/mecab/dic/open-jtalk/naist-jdic \
            -m /usr/share/hts-voice/nitech-jp-atr503-m001/nitech_jp_atr503_m001.htsvoice \
            -r "$VOICE_RATE" \
            -ow voice.wav < narration.txt

      - name: Measure audio duration
        id: dur
        run: |
          D=$(ffprobe -v error -show_entries format=duration -of \
            default=noprint_wrappers=1:nokey=1 voice.wav)
          printf "duration=%.3f\n" "$D" >> $GITHUB_OUTPUT

      - name: Build SRT aligned to audio (proportional)
        env:
          AUDIO_DUR: ${{ steps.dur.outputs.duration }}
        run: |
          python3 - << 'PY'
          import json, os
          segs = json.load(open("segments.json","r",encoding="utf-8"))
          total = float(os.environ.get("AUDIO_DUR","50"))
          if total < 5: total = 50.0
          def weight(t):
              t = "".join(ch for ch in str(t) if ch.strip())
              return max(1, len(t))
          W = [weight(s.get("text","")) for s in segs]
          S = sum(W) or 1
          lens = [total*w/S for w in W]
          starts=[0.0]
          for L in lens[:-1]:
              starts.append(starts[-1]+L)
          def ts(x):
              x=max(0.0,x)
              h=int(x//3600); m=int((x%3600)//60); s=int(x%60); ms=int((x*1000)%1000)
              return f"{h:02d}:{m:02d}:{s:02d},{ms:03d}"
          lines=[]
          for i, s in enumerate(segs,1):
              st=starts[i-1]; en=(starts[i] if i<len(starts) else total)
              text=str(s.get("text","")).strip()
              if not text: continue
              lines += [str(i), f"{ts(st)} --> {ts(en)}", text, ""]
          open("subs.srt","w",encoding="utf-8").write("\n".join(lines))
          # 便宜：開始秒リストも保存（字幕の境界）
          json.dump(starts, open("seg_starts.json","w"), ensure_ascii=False)
          PY

      - name: Build BG schedule from bg_switch_at + bg_urls
        env:
          AUDIO_DUR: ${{ steps.dur.outputs.duration }}
        run: |
          python3 - << 'PY'
          import json, os
          total = float(os.environ.get("AUDIO_DUR","50"))
          if total < 1: total = 50.0
          # 入力
          try:
              bg_switch = json.load(open("bg_switch_at.json","r",encoding="utf-8"))
          except Exception:
              bg_switch = []
          bg_switch = [float(x) for x in bg_switch if isinstance(x,(int,float,str))]
          # 正規化：0を先頭に、総尺を終端に、昇順ユニーク
          pts = sorted(set([0.0] + [x for x in bg_switch if x>0] + [total]))
          # 画像URL
          urls = [u.strip() for u in open("bg_urls.txt","r",encoding="utf-8").read().splitlines() if u.strip()]
          if not urls:
              urls = ["https://picsum.photos/1080/1920"]
          # 区間化
          sched=[]
          for i in range(len(pts)-1):
              url = urls[i % len(urls)]
              sched.append({"url": url, "start": pts[i], "end": pts[i+1]})
          json.dump(sched, open("bg_sched.json","w",encoding="utf-8"), ensure_ascii=False, indent=2)
          PY

      - name: Download BG images
        run: |
          i=0
          while read -r url; do
            i=$((i+1))
            curl -L "$url" -o "bg${i}.jpg" || true
          done < <(jq -r '.[].url' bg_sched.json)

      - name: Build BG slideshow (concat demuxer)
        run: |
          jq -r '.[] | "file bg\(. | input_line_number).jpg\nduration \(.end - .start)"' bg_sched.json > bglist.txt
          # 末尾durationを活かすため重複指定（concat demuxerの仕様）
          last="bg$(jq length bg_sched.json).jpg"
          echo "file $last" >> bglist.txt
          ffmpeg -y -f concat -safe 0 -i bglist.txt \
            -vf "scale=1080:1920:force_original_aspect_ratio=cover,fps=30,format=yuv420p" \
            -pix_fmt yuv420p bg.mp4

      - name: Compose final (subtitles + TTS)
        run: |
          ffmpeg -y -i bg.mp4 -i voice.wav \
            -vf "subtitles=subs.srt:force_style='Fontname=Noto Sans CJK JP,Fontsize=42,Outline=3,Shadow=0'" \
            -c:v libx264 -pix_fmt yuv420p -r 30 -c:a aac -shortest short.mp4

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: short-${{ github.run_id }}
          path: short.mp4
          retention-days: 7
